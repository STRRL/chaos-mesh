// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager/repo.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/template"
	workflow "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/workflow"
)

// MockWorkflowRepo is a mock of WorkflowRepo interface
type MockWorkflowRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepoMockRecorder
}

// MockWorkflowRepoMockRecorder is the mock recorder for MockWorkflowRepo
type MockWorkflowRepoMockRecorder struct {
	mock *MockWorkflowRepo
}

// NewMockWorkflowRepo creates a new mock instance
func NewMockWorkflowRepo(ctrl *gomock.Controller) *MockWorkflowRepo {
	mock := &MockWorkflowRepo{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowRepo) EXPECT() *MockWorkflowRepoMockRecorder {
	return m.recorder
}

// FetchWorkflow mocks base method
func (m *MockWorkflowRepo) FetchWorkflow(workflowName string) (workflow.WorkflowSpec, workflow.WorkflowStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWorkflow", workflowName)
	ret0, _ := ret[0].(workflow.WorkflowSpec)
	ret1, _ := ret[1].(workflow.WorkflowStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchWorkflow indicates an expected call of FetchWorkflow
func (mr *MockWorkflowRepoMockRecorder) FetchWorkflow(workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWorkflow", reflect.TypeOf((*MockWorkflowRepo)(nil).FetchWorkflow), workflowName)
}

// CreateNodes mocks base method
func (m *MockWorkflowRepo) CreateNodes(workflowName string, templates []template.Template, parentNode string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodes", workflowName, templates, parentNode)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodes indicates an expected call of CreateNodes
func (mr *MockWorkflowRepoMockRecorder) CreateNodes(workflowName, templates, parentNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodes", reflect.TypeOf((*MockWorkflowRepo)(nil).CreateNodes), workflowName, templates, parentNode)
}

// UpdateNodesToRunning mocks base method
func (m *MockWorkflowRepo) UpdateNodesToRunning(workflowName, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodesToRunning", workflowName, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodesToRunning indicates an expected call of UpdateNodesToRunning
func (mr *MockWorkflowRepoMockRecorder) UpdateNodesToRunning(workflowName, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodesToRunning", reflect.TypeOf((*MockWorkflowRepo)(nil).UpdateNodesToRunning), workflowName, nodeName)
}

// UpdateNodesToWaitingForChild mocks base method
func (m *MockWorkflowRepo) UpdateNodesToWaitingForChild(workflowName, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodesToWaitingForChild", workflowName, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodesToWaitingForChild indicates an expected call of UpdateNodesToWaitingForChild
func (mr *MockWorkflowRepoMockRecorder) UpdateNodesToWaitingForChild(workflowName, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodesToWaitingForChild", reflect.TypeOf((*MockWorkflowRepo)(nil).UpdateNodesToWaitingForChild), workflowName, nodeName)
}

// UpdateNodesToWaitingForSchedule mocks base method
func (m *MockWorkflowRepo) UpdateNodesToWaitingForSchedule(workflowName, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodesToWaitingForSchedule", workflowName, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodesToWaitingForSchedule indicates an expected call of UpdateNodesToWaitingForSchedule
func (mr *MockWorkflowRepoMockRecorder) UpdateNodesToWaitingForSchedule(workflowName, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodesToWaitingForSchedule", reflect.TypeOf((*MockWorkflowRepo)(nil).UpdateNodesToWaitingForSchedule), workflowName, nodeName)
}
