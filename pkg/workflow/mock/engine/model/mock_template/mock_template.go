// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine/model/template/template.go

// Package mock_template is a generated GoMock package.
package mock_template

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/template"
)

// MockTemplate is a mock of Template interface
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockTemplate) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockTemplateMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTemplate)(nil).GetName))
}

// GetTemplateType mocks base method
func (m *MockTemplate) GetTemplateType() template.TemplateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateType")
	ret0, _ := ret[0].(template.TemplateType)
	return ret0
}

// GetTemplateType indicates an expected call of GetTemplateType
func (mr *MockTemplateMockRecorder) GetTemplateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateType", reflect.TypeOf((*MockTemplate)(nil).GetTemplateType))
}

// GetDuration mocks base method
func (m *MockTemplate) GetDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration
func (mr *MockTemplateMockRecorder) GetDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockTemplate)(nil).GetDuration))
}

// GetDeadline mocks base method
func (m *MockTemplate) GetDeadline() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadline")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDeadline indicates an expected call of GetDeadline
func (mr *MockTemplateMockRecorder) GetDeadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadline", reflect.TypeOf((*MockTemplate)(nil).GetDeadline))
}

// MockTemplates is a mock of Templates interface
type MockTemplates struct {
	ctrl     *gomock.Controller
	recorder *MockTemplatesMockRecorder
}

// MockTemplatesMockRecorder is the mock recorder for MockTemplates
type MockTemplatesMockRecorder struct {
	mock *MockTemplates
}

// NewMockTemplates creates a new mock instance
func NewMockTemplates(ctrl *gomock.Controller) *MockTemplates {
	mock := &MockTemplates{ctrl: ctrl}
	mock.recorder = &MockTemplatesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplates) EXPECT() *MockTemplatesMockRecorder {
	return m.recorder
}

// FetchAllTemplates mocks base method
func (m *MockTemplates) FetchAllTemplates() []template.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTemplates")
	ret0, _ := ret[0].([]template.Template)
	return ret0
}

// FetchAllTemplates indicates an expected call of FetchAllTemplates
func (mr *MockTemplatesMockRecorder) FetchAllTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTemplates", reflect.TypeOf((*MockTemplates)(nil).FetchAllTemplates))
}

// FetchTemplateMap mocks base method
func (m *MockTemplates) FetchTemplateMap() map[string]template.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTemplateMap")
	ret0, _ := ret[0].(map[string]template.Template)
	return ret0
}

// FetchTemplateMap indicates an expected call of FetchTemplateMap
func (mr *MockTemplatesMockRecorder) FetchTemplateMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTemplateMap", reflect.TypeOf((*MockTemplates)(nil).FetchTemplateMap))
}

// GetTemplateByName mocks base method
func (m *MockTemplates) GetTemplateByName(templateName string) (template.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByName", templateName)
	ret0, _ := ret[0].(template.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateByName indicates an expected call of GetTemplateByName
func (mr *MockTemplatesMockRecorder) GetTemplateByName(templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByName", reflect.TypeOf((*MockTemplates)(nil).GetTemplateByName), templateName)
}
