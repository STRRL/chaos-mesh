// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine/model/template/parallel.go

// Package mock_template is a generated GoMock package.
package mock_template

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/template"
)

// MockParallelTemplate is a mock of ParallelTemplate interface
type MockParallelTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockParallelTemplateMockRecorder
}

// MockParallelTemplateMockRecorder is the mock recorder for MockParallelTemplate
type MockParallelTemplateMockRecorder struct {
	mock *MockParallelTemplate
}

// NewMockParallelTemplate creates a new mock instance
func NewMockParallelTemplate(ctrl *gomock.Controller) *MockParallelTemplate {
	mock := &MockParallelTemplate{ctrl: ctrl}
	mock.recorder = &MockParallelTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParallelTemplate) EXPECT() *MockParallelTemplateMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockParallelTemplate) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockParallelTemplateMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockParallelTemplate)(nil).GetName))
}

// GetTemplateType mocks base method
func (m *MockParallelTemplate) GetTemplateType() template.TemplateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateType")
	ret0, _ := ret[0].(template.TemplateType)
	return ret0
}

// GetTemplateType indicates an expected call of GetTemplateType
func (mr *MockParallelTemplateMockRecorder) GetTemplateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateType", reflect.TypeOf((*MockParallelTemplate)(nil).GetTemplateType))
}

// GetDuration mocks base method
func (m *MockParallelTemplate) GetDuration() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuration indicates an expected call of GetDuration
func (mr *MockParallelTemplateMockRecorder) GetDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockParallelTemplate)(nil).GetDuration))
}

// GetDeadline mocks base method
func (m *MockParallelTemplate) GetDeadline() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadline")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeadline indicates an expected call of GetDeadline
func (mr *MockParallelTemplateMockRecorder) GetDeadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadline", reflect.TypeOf((*MockParallelTemplate)(nil).GetDeadline))
}

// GetParallelChildrenList mocks base method
func (m *MockParallelTemplate) GetParallelChildrenList() []template.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParallelChildrenList")
	ret0, _ := ret[0].([]template.Template)
	return ret0
}

// GetParallelChildrenList indicates an expected call of GetParallelChildrenList
func (mr *MockParallelTemplateMockRecorder) GetParallelChildrenList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParallelChildrenList", reflect.TypeOf((*MockParallelTemplate)(nil).GetParallelChildrenList))
}
