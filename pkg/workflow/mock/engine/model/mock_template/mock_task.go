// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine/model/template/task.go

// Package mock_template is a generated GoMock package.
package mock_template

import (
	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/template"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTaskTemplate is a mock of TaskTemplate interface
type MockTaskTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTaskTemplateMockRecorder
}

// MockTaskTemplateMockRecorder is the mock recorder for MockTaskTemplate
type MockTaskTemplateMockRecorder struct {
	mock *MockTaskTemplate
}

// NewMockTaskTemplate creates a new mock instance
func NewMockTaskTemplate(ctrl *gomock.Controller) *MockTaskTemplate {
	mock := &MockTaskTemplate{ctrl: ctrl}
	mock.recorder = &MockTaskTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskTemplate) EXPECT() *MockTaskTemplateMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockTaskTemplate) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockTaskTemplateMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTaskTemplate)(nil).GetName))
}

// GetTemplateType mocks base method
func (m *MockTaskTemplate) GetTemplateType() template.TemplateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateType")
	ret0, _ := ret[0].(template.TemplateType)
	return ret0
}

// GetTemplateType indicates an expected call of GetTemplateType
func (mr *MockTaskTemplateMockRecorder) GetTemplateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateType", reflect.TypeOf((*MockTaskTemplate)(nil).GetTemplateType))
}

// GetDuration mocks base method
func (m *MockTaskTemplate) GetDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration
func (mr *MockTaskTemplateMockRecorder) GetDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockTaskTemplate)(nil).GetDuration))
}

// GetDeadline mocks base method
func (m *MockTaskTemplate) GetDeadline() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadline")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDeadline indicates an expected call of GetDeadline
func (mr *MockTaskTemplateMockRecorder) GetDeadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadline", reflect.TypeOf((*MockTaskTemplate)(nil).GetDeadline))
}

// GetAllTemplates mocks base method
func (m *MockTaskTemplate) GetAllTemplates() []template.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplates")
	ret0, _ := ret[0].([]template.Template)
	return ret0
}

// GetAllTemplates indicates an expected call of GetAllTemplates
func (mr *MockTaskTemplateMockRecorder) GetAllTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockTaskTemplate)(nil).GetAllTemplates))
}
