// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine/model/node/task.go

// Package mock_node is a generated GoMock package.
package mock_node

import (
	node "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/node"
	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/engine/model/template"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskNode is a mock of TaskNode interface
type MockTaskNode struct {
	ctrl     *gomock.Controller
	recorder *MockTaskNodeMockRecorder
}

// MockTaskNodeMockRecorder is the mock recorder for MockTaskNode
type MockTaskNodeMockRecorder struct {
	mock *MockTaskNode
}

// NewMockTaskNode creates a new mock instance
func NewMockTaskNode(ctrl *gomock.Controller) *MockTaskNode {
	mock := &MockTaskNode{ctrl: ctrl}
	mock.recorder = &MockTaskNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskNode) EXPECT() *MockTaskNodeMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockTaskNode) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockTaskNodeMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTaskNode)(nil).GetName))
}

// GetNodePhase mocks base method
func (m *MockTaskNode) GetNodePhase() node.NodePhase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePhase")
	ret0, _ := ret[0].(node.NodePhase)
	return ret0
}

// GetNodePhase indicates an expected call of GetNodePhase
func (mr *MockTaskNodeMockRecorder) GetNodePhase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePhase", reflect.TypeOf((*MockTaskNode)(nil).GetNodePhase))
}

// GetParentNodeName mocks base method
func (m *MockTaskNode) GetParentNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetParentNodeName indicates an expected call of GetParentNodeName
func (mr *MockTaskNodeMockRecorder) GetParentNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentNodeName", reflect.TypeOf((*MockTaskNode)(nil).GetParentNodeName))
}

// GetTemplateName mocks base method
func (m *MockTaskNode) GetTemplateName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTemplateName indicates an expected call of GetTemplateName
func (mr *MockTaskNodeMockRecorder) GetTemplateName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateName", reflect.TypeOf((*MockTaskNode)(nil).GetTemplateName))
}

// GetTemplateType mocks base method
func (m *MockTaskNode) GetTemplateType() template.TemplateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateType")
	ret0, _ := ret[0].(template.TemplateType)
	return ret0
}

// GetTemplateType indicates an expected call of GetTemplateType
func (mr *MockTaskNodeMockRecorder) GetTemplateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateType", reflect.TypeOf((*MockTaskNode)(nil).GetTemplateType))
}

// FetchAvailableChildren mocks base method
func (m *MockTaskNode) FetchAvailableChildren() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAvailableChildren")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAvailableChildren indicates an expected call of FetchAvailableChildren
func (mr *MockTaskNodeMockRecorder) FetchAvailableChildren() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAvailableChildren", reflect.TypeOf((*MockTaskNode)(nil).FetchAvailableChildren))
}
