// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine/model/node/node_name.go

// Package mock_node is a generated GoMock package.
package mock_node

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNodeNameGenerator is a mock of NodeNameGenerator interface
type MockNodeNameGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockNodeNameGeneratorMockRecorder
}

// MockNodeNameGeneratorMockRecorder is the mock recorder for MockNodeNameGenerator
type MockNodeNameGeneratorMockRecorder struct {
	mock *MockNodeNameGenerator
}

// NewMockNodeNameGenerator creates a new mock instance
func NewMockNodeNameGenerator(ctrl *gomock.Controller) *MockNodeNameGenerator {
	mock := &MockNodeNameGenerator{ctrl: ctrl}
	mock.recorder = &MockNodeNameGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeNameGenerator) EXPECT() *MockNodeNameGeneratorMockRecorder {
	return m.recorder
}

// GenerateNodeName mocks base method
func (m *MockNodeNameGenerator) GenerateNodeName(templateName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNodeName", templateName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateNodeName indicates an expected call of GenerateNodeName
func (mr *MockNodeNameGeneratorMockRecorder) GenerateNodeName(templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNodeName", reflect.TypeOf((*MockNodeNameGenerator)(nil).GenerateNodeName), templateName)
}
